/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: advên (https://sketchfab.com/adven-troust)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/roulette-wheel-4d41d3c2253641b5b2075522060dd3db
Title: Roulette Wheel
*/
import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";

import { useFrame } from "@react-three/fiber";

export function Model({ envMap, ...props }) {
  const { nodes, materials } = useGLTF("/roulette_wheel.glb");
  const wheelRef = useRef();
  const rouletteRef = useRef();
  // console.log(Gltf);
  useEffect(() => {
    // If the roulette reference is valid
    if (rouletteRef.current) {
      // This will affect the entire roulette except the wheel
      const rouletteMaterial = materials.Roulette.clone();
      rouletteMaterial.metalness = 1; // Adjust for less metalness
      rouletteMaterial.roughness = 0; // Adjust for more roughness
      rouletteMaterial.reflectivity = 1;
      rouletteMaterial.ior = 3;
      rouletteRef.current.material = rouletteMaterial;
    }
  }, [materials.Roulette]); // Depend on Roulette material

  useEffect(() => {
    // If the wheel reference is valid
    if (wheelRef.current) {
      // This will affect only the wheel
      const wheelMaterial = materials.Roulette.clone();
      wheelMaterial.metalness = 1; // Metal appearance
      wheelMaterial.roughness = 0; // Smooth surface
      wheelMaterial.envMap = envMap; // Apply the CubeCamera render target
      wheelMaterial.envMapIntensity = 1; // Intensity of reflection
      wheelMaterial.needsUpdate = true; // Ensure the material updates
      wheelRef.current.material = wheelMaterial;
      wheelMaterial.ior = 3;
      wheelMaterial.reflectivity = 1;
    }
  }, [materials.Roulette, envMap]); // Depend on envMap

  useFrame((_, delta) => {
    //Tekerlek ve numaraların saat yönünde dönmesi
    wheelRef.current.rotation.z += -0.5 * delta;
  });

  return (
    <group {...props} dispose={null}>
      <group scale={0.03}>
        <mesh
          name="Roulette"
          geometry={nodes.Roulette001_Roulette_0.geometry}
          material={materials.Roulette}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
          ref={rouletteRef}
        />
        <mesh
          ref={wheelRef}
          name="Wheel"
          geometry={nodes.Roulette002_Roulette_0.geometry}
          material={materials.Roulette}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/roulette_wheel.glb");
